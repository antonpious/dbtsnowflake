
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbtsnowflake'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'dbtsnowflake'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# this is a different behavior
# it uses the dev schema and this schema
# even if we don't put the plus it appends
# staging_prodraw
# in order to change this behavior override the generate_schema_name macro
# the generate_database_name macros is correct
# https://docs.getdbt.com/docs/build/custom-databases#generate_database_name
# https://docs.getdbt.com/docs/build/custom-schemas#how-does-dbt-generate-a-models-schema-name
seeds:
  dbtsnowflake:
    +schema: prodraw

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  dbtsnowflake:
    staging:
      +materialized: view
    # Config indicated by + and applies to all files under models/example/
    # example:
    #  +materialized: view
